(*
 * This is a parser grammar for the zeroql language.
 *
 * The precedence of the operators and notations is mostly based on the following table:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table
 *
 * Symbols grouped in << and >> are permutable.
 *)

(* KEYWORDS *)

kw_create =
    | plain_identifier["create"]
    | plain_identifier["CREATE"]

kw_relate =
    | plain_identifier["relate"]
    | plain_identifier["RELATE"]

kw_delete =
    | plain_identifier["delete"]
    | plain_identifier["DELETE"]

kw_update =
    | plain_identifier["update"]
    | plain_identifier["UPDATE"]

kw_select =
    | plain_identifier["select"]
    | plain_identifier["SELECT"]

kw_fold =
    | plain_identifier["fold"]
    | plain_identifier["FOLD"]

kw_omit =
    | plain_identifier["omit"]
    | plain_identifier["OMIT"]

kw_break =
    | plain_identifier["break"]
    | plain_identifier["BREAK"]

kw_continue =
    | plain_identifier["continue"]
    | plain_identifier["CONTINUE"]

kw_set =
    | plain_identifier["set"]
    | plain_identifier["SET"]

kw_begin =
    | plain_identifier["begin"]
    | plain_identifier["BEGIN"]

kw_transaction =
    | plain_identifier["transaction"]
    | plain_identifier["TRANSACTION"]

kw_commit =
    | plain_identifier["commit"]
    | plain_identifier["COMMIT"]

kw_cancel =
    | plain_identifier["cancel"]
    | plain_identifier["CANCEL"]

kw_define =
    | plain_identifier["define"]
    | plain_identifier["DEFINE"]

kw_redefine =
    | plain_identifier["redefine"]
    | plain_identifier["REDEFINE"]

kw_remove =
    | plain_identifier["remove"]
    | plain_identifier["REMOVE"]

kw_describe =
    | plain_identifier["describe"]
    | plain_identifier["DESCRIBE"]

kw_namespace =
    | plain_identifier["namespace"]
    | plain_identifier["NAMESPACE"]

kw_ns =
    | plain_identifier["ns"]
    | plain_identifier["NS"]

kw_database =
    | plain_identifier["database"]
    | plain_identifier["DATABASE"]

kw_db =
    | plain_identifier["db"]
    | plain_identifier["DB"]

kw_table =
    | plain_identifier["table"]
    | plain_identifier["TABLE"]

kw_fields =
    | plain_identifier["fields"]
    | plain_identifier["FIELDS"]

kw_index =
    | plain_identifier["index"]
    | plain_identifier["INDEX"]

kw_indices =
    | plain_identifier["indices"]
    | plain_identifier["INDICES"]

kw_type =
    | plain_identifier["type"]
    | plain_identifier["TYPE"]

kw_enum =
    | plain_identifier["enum"]
    | plain_identifier["ENUM"]

kw_edge =
    | plain_identifier["edge"]
    | plain_identifier["EDGE"]

kw_module =
    | plain_identifier["module"]
    | plain_identifier["MODULE"]

kw_param =
    | plain_identifier["param"]
    | plain_identifier["PARAM"]

kw_mod =
    | plain_identifier["mod"]
    | plain_identifier["MOD"]

kw_value =
    | plain_identifier["value"]
    | plain_identifier["VALUE"]

kw_values =
    | plain_identifier["values"]
    | plain_identifier["VALUES"]

kw_variant =
    | plain_identifier["variant"]
    | plain_identifier["VARIANT"]

kw_variants =
    | plain_identifier["variants"]
    | plain_identifier["VARIANTS"]

kw_assert =
    | plain_identifier["assert"]
    | plain_identifier["ASSERT"]

kw_readonly =
    | plain_identifier["readonly"]
    | plain_identifier["READONLY"]

kw_unique =
    | plain_identifier["unique"]
    | plain_identifier["UNIQUE"]

kw_use =
    | plain_identifier["use"]
    | plain_identifier["USE"]

kw_if =
    | plain_identifier["if"]
    | plain_identifier["IF"]

kw_else =
    | plain_identifier["else"]
    | plain_identifier["ELSE"]

kw_for =
    | plain_identifier["for"]
    | plain_identifier["FOR"]

kw_then =
    | plain_identifier["then"]
    | plain_identifier["THEN"]

kw_do =
    | plain_identifier["do"]
    | plain_identifier["DO"]

kw_end =
    | plain_identifier["end"]
    | plain_identifier["END"]

kw_not =
    | plain_identifier["not"]
    | plain_identifier["NOT"]

kw_exists =
    | plain_identifier["exists"]
    | plain_identifier["EXISTS"]

kw_with =
    | plain_identifier["with"]
    | plain_identifier["WITH"]

kw_on =
    | plain_identifier["on"]
    | plain_identifier["ON"]

kw_let =
    | plain_identifier["let"]
    | plain_identifier["LET"]

kw_where =
    | plain_identifier["where"]
    | plain_identifier["WHERE"]

kw_group =
    | plain_identifier["group"]
    | plain_identifier["GROUP"]

kw_limit =
    | plain_identifier["limit"]
    | plain_identifier["LIMIT"]

kw_start =
    | plain_identifier["start"]
    | plain_identifier["START"]

kw_order =
    | plain_identifier["order"]
    | plain_identifier["ORDER"]

kw_by =
    | plain_identifier["by"]
    | plain_identifier["BY"]

kw_at =
    | plain_identifier["at"]
    | plain_identifier["AT"]

kw_to =
    | plain_identifier["to"]
    | plain_identifier["TO"]

kw_no =
    | plain_identifier["no"]
    | plain_identifier["NO"]

kw_asc =
    | plain_identifier["asc"]
    | plain_identifier["ASC"]

kw_desc =
    | plain_identifier["desc"]
    | plain_identifier["DESC"]

kw_as =
    | plain_identifier["as"]
    | plain_identifier["AS"]

(* OPERATORS *)

op_mul =
    | op_mul_lexer
    | op_star

op_and =
    | op_and_lexer
    | plain_identifier["and"]
    | plain_identifier["AND"]

op_or =
    | op_or_lexer
    | plain_identifier["or"]
    | plain_identifier["OR"]

op_is =
    | op_is_lexer
    | plain_identifier["is"]
    | plain_identifier["IS"]

op_is_not =
    | op_is_not_lexer
    | plain_identifier["is"] plain_identifier["not"]
    | plain_identifier["is"] plain_identifier["NOT"]
    | plain_identifier["IS"] plain_identifier["NOT"]
    | plain_identifier["IS"] plain_identifier["not"]

op_not =
    | op_not_lexer
    | plain_identifier["not"]
    | plain_identifier["NOT"]

op_in =
    | plain_identifier["in"]
    | plain_identifier["IN"]

op_not_in =
    | plain_identifier["not"] plain_identifier["in"]
    | plain_identifier["not"] plain_identifier["IN"]
    | plain_identifier["NOT"] plain_identifier["IN"]
    | plain_identifier["NOT"] plain_identifier["in"]

op_contains =
    | op_contains_lexer
    | plain_identifier["contains"]
    | plain_identifier["CONTAINS"]

op_not_contains =
    | op_not_contains_lexer
    | plain_identifier["not"] plain_identifier["contains"]
    | plain_identifier["not"] plain_identifier["CONTAINS"]
    | plain_identifier["NOT"] plain_identifier["CONTAINS"]
    | plain_identifier["NOT"] plain_identifier["contains"]

op_contains_none =
    | op_contains_none_lexer
    | plain_identifier["contains"] plain_identifier["none"]
    | plain_identifier["contains"] plain_identifier["NONE"]
    | plain_identifier["CONTAINS"] plain_identifier["NONE"]
    | plain_identifier["CONTAINS"] plain_identifier["none"]

op_contains_all =
    | op_contains_all_lexer
    | plain_identifier["contains"] plain_identifier["all"]
    | plain_identifier["contains"] plain_identifier["ALL"]
    | plain_identifier["CONTAINS"] plain_identifier["ALL"]
    | plain_identifier["CONTAINS"] plain_identifier["all"]

op_contains_any =
    | op_contains_any_lexer
    | plain_identifier["contains"] plain_identifier["any"]
    | plain_identifier["contains"] plain_identifier["ANY"]
    | plain_identifier["CONTAINS"] plain_identifier["ANY"]
    | plain_identifier["CONTAINS"] plain_identifier["any"]

op_match =
    | op_match_lexer
    | plain_identifier["match"]
    | plain_identifier["MATCH"]

op_not_match =
    | op_not_match_lexer
    | plain_identifier["not"] plain_identifier["match"]
    | plain_identifier["not"] plain_identifier["MATCH"]
    | plain_identifier["NOT"] plain_identifier["MATCH"]
    | plain_identifier["NOT"] plain_identifier["match"]

(* IDENTIFIERS *)

identifier =
    | plain_identifier
    | escaped_identifier

(* LITERALS *)

boolean_lit =
    | (plain_identifier["true"] | plain_identifier["TRUE"])
    | (plain_identifier["false"] | plain_identifier["FALSE"])

none_lit =
    | plain_identifier["none"]
    | plain_identifier["NONE"]

raw_lit =
    | integer_lit
    | float_lit
    | string_lit
    | regex_lit
    | byte_string_lit
    | boolean_lit
    | none_lit

list_lit =
    | "[" "]"
    | "[" op ("," op)* ","? "]"

object_lit =
    | "{" "}"
    | "{" identifier ":" op ("," identifier ":" op)* ","? "}"

tuple_lit =
    | "(" ")"
    | "(" op ("," op)* ","? ")"

lit =
    | raw_lit
    | list_lit
    | object_lit
    | tuple_lit

(* OPERATIONS *)

parens_op =
    | "(" exp ")"

scope_op =
    | identifier (op_scope identifier)+
    | identifier

atom_op =
    | lit
    | scope_op
    | parens_op
    | id_exp
    | variable

access_op =
    | index_op (op_dot | op_safe_nav) identifier
    | atom_op

index_op =
    | access_op "[" exp "]"
    | access_op "[" exp "]"
    | access_op

function_arg =
    | (identifier op_assign)? op

function_call_op =
    | index_op "(" (function_arg ("," function_arg)* ","?)? ")"
    | index_op

not_op =
    | (op_not | op_match) atom_op
    | function_call_op

unary_op =
    | (op_plus | op_minus) atom_op

unary_not_op =
    | not_op
    | unary_op
    | function_call_op

pow_op =
    | unary_not_op op_pow op
    | unary_not_op

mul_op =
    | op (op_mul | op_div | op_mod) pow_op
    | pow_op

add_op =
    | op (op_plus | op_minus) mul_op
    | mul_op

shift_op =
    | op (op_shl | op_shr) add_op
    | add_op

match_sim_op =
    | op (op_match | op_not_match | op_similarity) shift_op
    | shift_op

rel_op =
    | op (op_lt | op_gt | op_lte | op_gte | op_in | op_not_in | op_contains | op_not_contains | op_contains_none | op_contains_all | op_contains_any) match_sim_op
    | match_sim_op

eq_op =
    | op (op_eq | op_is | op_is_not) rel_op
    | rel_op

bit_and_op =
    | op op_bit_and eq_op
    | eq_op

bit_xor_op =
    | op op_bit_xor bit_and_op
    | bit_and_op

bit_or_op =
    | op op_bit_or bit_xor_op
    | bit_xor_op

and_op =
    | op op_and bit_or_op
    | bit_or_op

or_null_coalesce_op =
    | op (op_or | op_null_coalesce) and_op
    | and_op

range_op =
    | op? (op_range | op_range_incl) or_null_coalesce_op?
    | or_null_coalesce_op

op =
    | range_op
    | relation_exp

(* EXPRESSIONS *)

op_assign_any =
    | op_is_lexer
    | op_assign_plus
    | op_assign_minus
    | op_assign_mul
    | op_assign_div
    | op_assign_mod
    | op_assign_pow
    | op_assign_bit_and
    | op_assign_bit_or
    | op_assign_bit_xor
    | op_assign_bit_not
    | op_assign_shl
    | op_assign_shr
    | op_assign_null_coalesce

assign =
    | identifier op_assign_any op

where_guard =
    | kw_where op
    | kw_where op_star

id_exp =
    | identifier ":" lit
    | identifier ":" identifier
    | identifier ":" variable
    | identifier ":" op_star
    | identifier

single_relation_id =
    | id_exp
    | range_op
    | op_star

multi_relation_id =
    | "[" single_relation_id ("," single_relation_id)* ","? "]"

relation_id =
    | multi_relation_id
    | single_relation_id

relation_edge_id =
    | identifier "[" op "]"
    | identifier

relation_edge_not_op =
    | op_not relation_edge_id
    | relation_edge_id

relation_edge_and_op =
    | relation_edge_or_op op_and relation_edge_not_op
    | relation_edge_not_op

relation_edge_or_op =
    | relation_edge_or_op op_or relation_edge_and_op
    | relation_edge_and_op

op_arrow =
    | op_arrow_left
    | op_arrow_right
    | op_multi_arrow_right
    | op_multi_arrow_left

relation_exp =
    | (relation_id op_arrow relation_edge_or_op op_arrow)+ relation_id

create_exp =
    | kw_create id_exp kw_set object_lit
    | kw_create id_exp kw_set identifier op_assign op ("," identifier op_assign op)*
    | kw_create id_exp kw_set "(" (identifier ("," identifier)* ","?)? ")" kw_values tuple_lit ("," tuple_lit)*

relate_set_object =
    | kw_set object_lit

relate_set_comma =
    | kw_set identifier assign op ("," identifier assign op)*

relate_exp =
    | kw_relate relation_exp << where_guard? relate_set_object? >>
    | kw_relate relation_exp << where_guard? relate_set_comma? >>

target =
    | relation_exp
    | id_exp

delete_exp =
    | kw_delete target where_guard?

update_exp =
    | kw_update target << where_guard? relate_set_object >>
    | kw_update target << where_guard? relate_set_comma >>

select_field_fold =
    | kw_fold function_call_op

select_as =
    | kw_as identifier

select_field =
    | select_field_fold select_as?
    | op select_as?
    | index_op (op_dot | op_safe_nav) op_star
    | op_star

select_omit =
    | kw_omit identifier ("," identifier)*

select_fields =
    | select_field ("," select_field)* (","? select_omit)?

select_from_table_relate_id_as =
    | relate_id select_as?

select_from_table_relate =
    | (select_from_table_relate_id_as op_arrow)+ select_from_table_relate_id_as

select_from_table =
    | op select_as?
    | select_from_table_relate

select_from_tables =
    | select_from_table ("," select_from_table)*

select_from =
    | kw_from select_from_tables
    | kw_from op_star

select_with_indices =
    | kw_with kw_indices identifier ("," identifier)*
    | kw_with kw_no kw_index

select_group_by =
    | kw_group kw_by? identifier ("," identifier)*

select_order_by =
    | kw_order kw_by? identifier ("," identifier)* (kw_asc | kw_desc)?

select_start_at =
    | kw_start kw_at? op

select_limit_to =
    | kw_limit kw_to? op

select_exp =
    | kw_select select_fields select_from << where_guard? select_with_indices? select_group_by? select_order_by? select_start_at? select_limit_to? >>

remove_namespace_exp =
    | kw_remove kw_namespace if_exists? identifier
    | kw_remove kw_namespace identifier if_exists

remove_database_exp =
    | kw_remove kw_database if_exists? identifier on_namespace?
    | kw_remove kw_database identifier << if_exists? on_namespace? >>

remove_table_exp =
    | kw_remove kw_table if_exists? identifier on_database?
    | kw_remove kw_table identifier << if_exists? on_database? >>

remove_edge_exp =
    | kw_remove kw_edge if_exists? identifier on_database?
    | kw_remove kw_edge identifier << if_exists? on_database? >>

remove_type_exp =
    | kw_remove kw_type if_exists? identifier on_database?
    | kw_remove kw_type identifier << if_exists? on_database? >>

remove_enum_exp =
    | kw_remove kw_enum if_exists? identifier on_database?
    | kw_remove kw_enum identifier << if_exists? on_database? >>

remove_index_exp =
    | kw_remove kw_index if_exists? identifier << on_table? on_database? >>
    | kw_remove kw_index identifier << if_exists? on_table? on_database? >>

remove_module_exp =
    | kw_remove kw_module if_exists? identifier on_database?
    | kw_remove kw_module identifier << if_exists? on_database? >>

remove_param_exp =
    | kw_remove kw_param if_exists? variable on_database?
    | kw_remove kw_param variable << if_exists? on_database? >>

remove_exp =
    | remove_namespace_exp
    | remove_database_exp
    | remove_table_exp
    | remove_edge_exp
    | remove_type_exp
    | remove_enum_exp
    | remove_index_exp
    | remove_module_exp
    | remove_param_exp

describe_namespace_exp =
    | kw_describe kw_namespace if_exists? identifier
    | kw_describe kw_namespace identifier if_exists?

describe_database_exp =
    | kw_describe kw_database if_exists? identifier on_namespace?
    | kw_describe kw_database identifier << if_exists? on_namespace? >>

describe_table_exp =
    | kw_describe kw_table if_exists? identifier on_database?
    | kw_describe kw_table identifier << if_exists? on_database? >>

describe_edge_exp =
    | kw_describe kw_edge if_exists? identifier on_database?
    | kw_describe kw_edge identifier << if_exists? on_database? >>

describe_type_exp =
    | kw_describe kw_type if_exists? identifier on_database?
    | kw_describe kw_type identifier << if_exists? on_database? >>

describe

describe_index_exp =
    | kw_describe kw_index if_exists? identifier on_table? on_database?
    | kw_describe kw_index identifier << if_exists? on_table? on_database? >>

describe_module_exp =
    | kw_describe kw_module if_exists? identifier on_database?
    | kw_describe kw_module identifier << if_exists? on_database? >>

describe_param_exp =
    | kw_describe kw_param if_exists? variable on_database?
    | kw_describe kw_param variable << if_exists? on_database? >>

describe_exp =
    | describe_namespace_exp
    | describe_database_exp
    | describe_table_exp
    | describe_edge_exp
    | describe_type_exp
    | describe_enum_exp
    | describe_index_exp
    | describe_module_exp
    | describe_param_exp

begin_exp =
    | kw_begin kw_transaction?

commit_exp =
    | kw_commit kw_transaction?

cancel_exp =
    | kw_cancel kw_transaction?

for_exp =
    | kw_for variable op_in op kw_do program kw_end

else_part =
    | kw_else program

else_if_part =
    | kw_else kw_if op kw_then program

if_else_exp =
    | kw_if op kw_then program else_if_part* else_part? kw_end

let_exp =
    | kw_let variable (kw_type type_sig)? op_assign exp

set_exp =
    | kw_set variable op_assign_any exp

exp =
    | relate_exp
    | create_exp
    | delete_exp
    | update_exp
    | select_exp
    | remove_exp
    | describe_exp
    | begin_exp
    | commit_exp
    | cancel_exp
    | for_exp
    | if_else_exp
    | let_exp
    | set_exp
    | op

(* STATEMENTS *)

type_sig =
    | "[" type_sig ";" integer_lit "]" "?"*
    | "[" type_sig "]" "?"*
    | "(" type_sig ("," type_sig)* ","? ")" "?"*
    | scope_op "<" type_sig ("," type_sig)* ","? ">" "?"*
    | scope_op "?"*

if_not_exists =
    | kw_if kw_not kw_exists

if_exists =
    | kw_if kw_exists

on_namespace =
    | kw_on (kw_namespace | kw_ns)? identifier

on_database =
    | kw_on (kw_database | kw_db)? identifier

on_table =
    | kw_on kw_table identifier

define_namespace_stmt =
    | kw_define (kw_namespace | kw_ns) if_not_exists? identifier
    | kw_define (kw_namespace | kw_ns) identifier if_not_exists?

define_database_stmt =
    | kw_define (kw_database | kw_db) if_not_exists? identifier on_namespace?
    | kw_define (kw_database | kw_db) identifier << if_not_exists? on_namespace? >>

define_table_field_type =
    | kw_type type_sig

define_table_field_value =
    | kw_value op

define_table_field_assert =
    | kw_assert op

define_table_field =
    | identifier << define_table_field_type define_table_field_value? define_table_field_assert* kw_readonly? kw_unique? >>

define_table_fields =
    | kw_fields define_table_field ("," define_table_field)*

define_table_stmt =
    | kw_define kw_table if_not_exists? identifier on_database? define_table_fields?
    | kw_define kw_table identifier << if_not_exists? on_database? define_table_fields? >>

define_edge_stmt =
    | kw_define kw_edge if_not_exists? identifier on_database? define_table_fields?
    | kw_define kw_edge identifier << if_not_exists? on_database? define_table_fields? >>

define_type_field =
    | identifier define_table_field_type

define_type_fields =
    | kw_fields define_type_field ("," define_type_field)*

define_type_stmt =
    | kw_define kw_type if_not_exists? identifier on_database? define_type_fields?
    | kw_define kw_type identifier << if_not_exists? on_database? define_type_fields? >>

define_enum_variants =
    | kw_variants identifier ("," identifier)*

define_enum_stmt =
    | kw_define kw_enum if_not_exists? identifier on_database? define_enum_variants?
    | kw_define kw_enum identifier << if_not_exists? on_database? define_enum_variants? >>

define_type_stmt =
    | kw_define kw_type if_not_exists? identifier on_database? define_table_fields?
    | kw_define kw_type identifier << if_not_exists? on_database? define_table_fields? >>

define_index_fields =
    | kw_fields identifier ("," identifier)*

define_index_with =
    | kw_with function_call_op

define_index_stmt =
    | kw_define kw_index if_not_exists? identifier << on_database? on_table? define_index_fields define_index_with? >>
    | kw_define kw_index identifier << if_not_exists? on_database? on_table? define_index_fields define_index_with? >>

define_module_block =
    | kw_with module_block kw_end

define_module_stmt =
    | kw_define (kw_module | kw_mod) if_not_exists? identifier << define_module_block on_database? >>
    | kw_define (kw_module | kw_mod) identifier << if_not_exists? define_module_block on_database? >>

define_param_stmt =
    | kw_define kw_param if_not_exists? identifier << on_database? define_table_field_type? define_table_field_value >>
    | kw_define kw_param identifier << if_not_exists? on_database? define_table_field_type? define_table_field_value >>

define_stmt =
    | define_namespace_stmt
    | define_database_stmt
    | define_table_stmt
    | define_edge_stmt
    | define_type_stmt
    | define_enum_stmt
    | define_index_stmt
    | define_module_stmt
    | define_param_stmt

use_stmt =
    | kw_use (kw_namespace | kw_ns) identifier ((kw_database | kw_db) identifier
    | kw_use (kw_database | kw_db) identifier
    | kw_use kw_table identifier

stmt =
    | define_stmt
    | use_stmt
    | kw_break
    | kw_continue

(* PROGRAM *)

program =
    | terminator* (stmt | exp) (terminator+ (stmt | exp))* terminator*

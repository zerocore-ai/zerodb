(*
 * This is a grammar for the zeroql language.
 *
 * The precedence of the operators and notations is based on the following table:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table
 *)

(* COMMENTS *)

line_comment =
    | "#" <any source character except newline>*

(* SPACES *)

space =
    | " "
    | "\t"

newlines =
    | space* ("\n" space*)+

gap =
    | newlines
    | ε

cont =
    | space* "\\" newlines
    | space+
    | ε

(* LITERALS *)

nonzerodigit =
    | [1-9]

digit =
    | [0-9]

bin_digit =
    | "0"
    | "1"

oct_digit =
    | [0-7]

hex_digit =
    | digit
    | [a-f]
    | [A-F]

digit_part =
    | digit ("_"? digit)*

exponent =
    | "e" ("+" | "-")? digit_part

fraction =
    | "." digit_part

point_float =
    | digit_part? fraction
    | digit_part "."

exponent_float =
    | (digit_part | point_float) exponent

dec_integer_literal =
    | non_zero_digit ("_"? digit)*
    | "0"+ ("_"? "0")*

bin_integer_literal =
    | "0b" ("_"? bin_digit)+

oct_integer_literal =
    | "0o" ("_"? oct_digit)+

hex_integer_literal =
    | "0x" ("_"? hex_digit)+

integer_literal =
    | dec_integer_literal
    | hex_integer_literal
    | bin_integer_literal
    | oct_integer_literal

float_literal =
    | point_float
    | exponent_float

string_char =
    | <any source character except "\\" or newline or the quote>

string_escape_seq_char =
    | "t"
    | "n"
    | "r"
    | "\\"

string_escape_seq =
    | "\\" string_escape_seq_char

string_item =
    | string_char
    | string_escape_seq

string_literal =
    | "'" string_item* "'"
    | '"' string_item* '"'

regex_item =
    | <any source character except newline or "/">

regex_literal =
    | "//" regex_item* "//"

boolean_literal =
    | "true"
    | "false"

list_literal =
    | "[" gap "]"
    | "[" gap expression (gap ',' gap expression)* (gap ",")? gap "]"

tuple_literal =
    | "(" gap expression gap ',' gap ")"
    | "(" gap expression (gap ',' gap expression)+ (gap ",")? gap ")"

range_literal =
    | "[" (gap expression)? gap ".." gap (gap "=")? (gap expression)? gap "]"

symbol_literal =
    | "#" identifier

object_literal =
    | "{" gap ":" gap "}"
    | "{" gap expression gap ":" gap expression (gap "," gap expression gap ":" gap expression)* (gap ",")? gap "}"

(* IDENTIFIER *)

identifier =
    | [a-zA-Z_] [a-zA-Z0-9_]*

(* EXPRESSIONS *)

inline_statement =
    | (expression space* ";" space*)+ expression (space* ";")?

statements =
    | (inline_statement newlines)* inline_statement

block_expression =
    | "{" gap statements gap "}"

match_expression =
    | (* TODO *)

if_expression =
    | (* TODO *)

for_expression =
    | (* TODO *)

while_expression =
    | (* TODO *)

closure_expression =
    | "|" gap (identifier (gap "," gap identifier)* gap)? gap "|" gap expression

list_comprehension_expression =
    | (* TODO *)

transaction_expression =
    | "transaction" gap block_expression

parens_expression =
    | "(" gap expression gap ")"

expression =
    | integer_literal
    | float_literal
    | string_literal
    | regex_literal
    | boolean_literal
    | list_literal
    | tuple_literal
    | range_literal
    | symbol_literal
    | object_literal
    | (* TODO *)

(* NOTATIONS *)

dot_notation =
    | dot_notation gap "." gap identifier

dot_symbol_notation =
index_notation =
scope_notation =
infix_notation =
prefix_notation =
call_notation =

try_notation =
    | expression gap "?"

unwrap_notation =
    | expression gap "!"

(* CONTROL FLOW *)

control_flow =
    | "return" gap expression
    | "break" (space+ ";")?
    | "continue" (space+ ";")?

(* UNARIES *)

arith_unary =



(* OPERATIONS *)

exp_operation =
mul_operation =
add_operation =
bsh_operation =
rel_operation =
eq_operation =
and_operation =
or_operation =
not_operation =
neg_operation =
pos_operation =
relate_operation =
grp_operation =

(* DECLARATIONS *)

type_declaration =
let_declaration =
function_declaration =
import_declaration =
